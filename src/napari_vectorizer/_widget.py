"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

from typing import TYPE_CHECKING

from magicgui import magic_factory
from skimage.util import img_as_float
from skimage.measure import find_contours, approximate_polygon
from napari.layers import Shapes

if TYPE_CHECKING:
    import napari

# the magic_factory decorator lets us customize aspects of our widget
# we specify a widget type for the threshold parameter
# and use auto_call=True so the function is called whenever
# the value of a parameter changes
@magic_factory(
    contours_tolerance={"widget_type": "FloatSpinBox", "value": 0.5, "min": 0.01, "max": 0.99},
    polygon_tolerance={"widget_type": "FloatSpinBox", "value": 0.5, "min": 0.00}
)
def label_vectorization_widget(
    label_layer: "napari.layers.Labels", contours_tolerance: "float", polygon_tolerance: "float"
) -> "napari.layers.Shapes":
    contours = find_contours(label_layer.data, contours_tolerance)
    polygons = [approximate_polygon(contour, polygon_tolerance) for contour in contours]
    
    return Shapes(polygons, shape_type="polygon")